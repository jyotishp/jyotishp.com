<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jyotish Poonganam</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>jyotishp.github.io/</link>
    <atom:link href="jyotishp.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 06 Jul 2016 13:32:30 +0530</pubDate>
    <lastBuildDate>Wed, 06 Jul 2016 13:32:30 +0530</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Signing kernel modules for UEFI secure boot systems</title>
        <description>&lt;p&gt;
	Most of the Linux distributions now-a-days include support for the UEFI Secure Boot feature, which means that these Linux distributions can be installed and run on systems where UEFI Secure Boot is enabled. When Secure Boot is enabled, the EFI operating system boot loaders, the Linux kernel, and all kernel modules must be signed with a private key and authenticated with the corresponding public key. Note that not all UEFI-based systems include support for Secure Boot.
&lt;/p&gt;
&lt;p&gt;
	The information provided in this article describes steps necessary to self-sign your privately built kernel modules on UEFI-based systems where Secure Boot is enabled. If you are interested to know more about UEFI, here&#39;s the link to &lt;a href=&quot;https://en.wikipedia.org/wiki/Unified_Extensible_Firmware_Interface&quot; target=&quot;_blank&quot;&gt;Wikipedia page&lt;/a&gt;.
&lt;/p&gt;
&lt;h2&gt;Generating Self-Signed Key Pair&lt;/h2&gt;
&lt;p&gt;
	Note that if the system is not UEFI-based or if UEFI Secure Boot is not enabled, the kernel modules need not be signed. You need to generate a public and private X.509 key pair. This key will be used to sign kernel modules after it has been built. The public key will be used to authenticate kernel modules when they are loaded.
&lt;/p&gt;
&lt;p&gt;
	Now, open your terminal and head to the folder where you wish to save the generated key pair. Now, using &lt;code&gt;openssl&lt;/code&gt;, generate the public and private key pair.
&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;openssl req -x509 -new -nodes -utf8 -sha256 -days 36500 -outform DER -out public_key.der -keyout private_key.priv&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;
	Now, you will be prompted to enter your country code, which in my case is IN. Next &lt;i&gt;State/Province name&lt;/i&gt; followed by &lt;i&gt;City, Organization Name, Unit Name&lt;/i&gt; and &lt;i&gt;Common Name&lt;/i&gt;. Next fill your &lt;i&gt;email address&lt;/i&gt; at the prompt. Now, you have sucessfully generated your public and private keys. The above command creates a public and private key pair with &lt;code&gt;utf-8&lt;/code&gt; encoding, using &lt;code&gt;sha256&lt;/code&gt; encryption valid for 10 years. You should notice &lt;i&gt;public_key.der&lt;/i&gt; and &lt;i&gt;private_key.priv&lt;/i&gt; files in the current directory.
&lt;/p&gt;
&lt;h2&gt;Adding your self-signed public key to MOK list&lt;/h2&gt;
&lt;p&gt;
	Next, we need to add this key to your Machine Owner Keys (MOK) list. We will use &lt;code&gt;mokutil&lt;/code&gt; to do this.
&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo mokutil --import public_key.der&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;
	You will be asked to enter a password. Give any password you like. Now, reboot your machine. You should get a prompt asking if you want to continue adding key to your MOK list. These prompts slightly vary depending upon your firmware. You will asked to enter the passphrase you defined earlier while importing the key using &lt;code&gt;mokutil&lt;/code&gt;. Enter it. Done! You have successfully added a self-signed public key to your MOK list.
&lt;/p&gt;
&lt;h2&gt;Signing your Kernel Module&lt;/h2&gt;
&lt;p&gt;
	Now, you need to sign your kernel module. To do it, type the following in your terminal
&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;/usr/src/&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;uname -r&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;/scripts/sign-file sha256 private_key.priv public_key.der your_module.ko&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;
	There you have it, a self-signed kernel module. You can insert it using modprobe or insmod.
&lt;/p&gt;</description>
        <pubDate>Tue, 05 Jul 2016 18:00:00 +0530</pubDate>
        <link>jyotishp.github.io/tutorials/kernel-development/signing-kernel-modules-for-uefi-secure-boot-systems</link>
        <guid isPermaLink="true">jyotishp.github.io/tutorials/kernel-development/signing-kernel-modules-for-uefi-secure-boot-systems</guid>
        
        
        <category>tutorials</category>
        
        <category>kernel-development</category>
        
      </item>
    
  </channel>
</rss>
